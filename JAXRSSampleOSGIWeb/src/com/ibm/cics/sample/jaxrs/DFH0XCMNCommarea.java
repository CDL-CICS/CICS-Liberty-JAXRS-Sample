package com.ibm.cics.sample.jaxrs;
import com.ibm.jzos.fields.*;

// Generated by com.ibm.jzos.recordgen.cobol.RecordClassGenerator on Thu Nov 20 14:44:32 GMT 2008

public class DFH0XCMNCommarea {   
	protected static CobolDatatypeFactory factory = new CobolDatatypeFactory();
	static { factory.setStringTrimDefault(false); } 

	/** <pre>
	 01 DFH0XCMN. </pre> */   
	public static final int DFH0XCMN_len = 998;    

	/** <pre>
	*****************************************************************
	*                                                               *
	* CONTROL BLOCK NAME = DFH0XCMN                                 *
	*                                                               *
	* DESCRIPTIVE NAME = CICS     (Samples) Example Application -   *
	*                     Main copybook for example application     *
	*                                                               *
	*  @BANNER_START                           01                   *
	*  Licensed Materials - Property of IBM                         *
	*                                                               *
	*  5655-M15              DFH0XCMN                               *
	*                                                               *
	*  (C) Copyright IBM Corp. 2004                                 *
	*                                                               *
	*  CICS                                                         *
	*  (Element of CICS Transaction Server                          *
	*  for z/OS, Version 3 Release 2)                               *
	*  @BANNER_END                                                  *
	*                                                               *
	* STATUS = 6.4.0                                                *
	*                                                               *
	* FUNCTION =                                                    *
	*      This copy book is part of the example application and    *
	*      defines the commarea interface to the catalog manager    *
	*      module and the datastore modules                         *
	*                                                               *
	*      The fields are as follows                                *
	*                                                               *
	*        CA-REQUEST-ID            Identifies function           *
	*        CA-RETURN-CODE           Return Code                   *
	*        CA-RESPONSE-MESSAGE      Response message              *
	*        CA-REQUEST-SPECIFIC      Redefined for inquire/order   *
	*                                                               *
	*        CA-INQUIRE-REQUEST       Group for inquire of 15 items *
	*          CA-LIST-START-REF      Reference to start list from  *
	*          CA-LAST-ITEM-REF       Last item returned            *
	*          CA-ITEM-COUNT          Number of items returned      *
	*          CA-CAT-ITEM            Catalog item                  *
	*              CA-ITEM-REF        Item reference number         *
	*              CA-DESCRIPTION     Short description             *
	*              CA-DEPARTMENT      Department item belongs to    *
	*              CA-COST            Cost of item                  *
	*              IN-STOCK           Number of items in stock      *
	*              ON-ORDER           Number of items on order      *
	*                                                               *
	*        CA-INQUIRE-SINGLE        Structure for inquire single  *
	*          CA-ITEM-REF-REQ        Reference number of item      *
	*          CA-SINGLE-ITEM.                                      *
	*            CA-SNGL-ITEM-REF     Item reference number returned*
	*            CA-SNGL-DESCRIPTION  Short description             *
	*            CA-SNGL-DEPARTMENT   Department item belongs to    *
	*            CA-SNGL-COST         Cost of item                  *
	*            IN-SNGL-STOCK        Number of items in stock      *
	*            ON-SNGL-ORDER        Number of items on order      *
	*                                                               *
	*        CA-ORDER-REQUEST         Structure for placing an order*
	*          CA-USERID              User name placing the order   *
	*          CA-CHARGE-DEPT         Department user belongs to    *
	*          CA-ITEM-REF-NUMBER     Item reference to be ordered  *
	*          CA-QUANTITY-REQ        Quantity of item required     *
	*                                                               *
	*---------------------------------------------------------------*
	*                                                               *
	* CHANGE ACTIVITY :                                             *
	*      $SEG(DFH0XCMN),COMP(SAMPLES),PROD(CICS    ):             *
	*                                                               *
	*   PN= REASON REL YYMMDD HDXXIII : REMARKS                     *
	*   $D0= I07544 640 040910 HDIPCB  : EXAMPLE - BASE APPLICATION *
	*                                                               *
	*****************************************************************
	*    Catalogue COMMAREA structure
	     03 CA-REQUEST-ID            PIC X(6). </pre> */
	protected static StringField CA_REQUEST_ID = factory.getStringField(6);

	/** <pre>
	     03 CA-RETURN-CODE           PIC 9(2). </pre> */
	protected static ExternalDecimalAsIntField CA_RETURN_CODE = factory.getExternalDecimalAsIntField(2, false, false, false, false);

	/** <pre>
	     03 CA-RESPONSE-MESSAGE      PIC X(79). </pre> */
	protected static StringField CA_RESPONSE_MESSAGE = factory.getStringField(79);

	/** <pre>
	     03 CA-REQUEST-SPECIFIC      PIC X(911). </pre> */
	protected static StringField CA_REQUEST_SPECIFIC = factory.getStringField(911);

	/** <pre>
	*    Fields used in Inquire Catalog
	     03 CA-INQUIRE-REQUEST REDEFINES CA-REQUEST-SPECIFIC. </pre> */
	static { factory.pushOffset(); } 
	static { factory.setOffset(CA_REQUEST_SPECIFIC.getOffset()); } 
	public static final int CA_INQUIRE_REQUEST_len = 911; 
	public static final int CA_INQUIRE_REQUEST_offset = factory.getOffset();

	/** <pre>
	         05 CA-LIST-START-REF        PIC 9(4). </pre> */
	protected static ExternalDecimalAsIntField CA_LIST_START_REF = factory.getExternalDecimalAsIntField(4, false, false, false, false);

	/** <pre>
	         05 CA-LAST-ITEM-REF         PIC 9(4). </pre> */
	protected static ExternalDecimalAsIntField CA_LAST_ITEM_REF = factory.getExternalDecimalAsIntField(4, false, false, false, false);

	/** <pre>
	         05 CA-ITEM-COUNT            PIC 9(3). </pre> */
	protected static ExternalDecimalAsIntField CA_ITEM_COUNT = factory.getExternalDecimalAsIntField(3, false, false, false, false);

	/** <pre>
	         05 CA-INQUIRY-RESPONSE-DATA PIC X(900). </pre> */
	protected static StringField CA_INQUIRY_RESPONSE_DATA = factory.getStringField(900);

	/** <pre>
	         05 CA-CAT-ITEM  REDEFINES CA-INQUIRY-RESPONSE-DATA
	                         OCCURS 15 TIMES. </pre> */
	static { factory.pushOffset(); } 
	static { factory.setOffset(CA_INQUIRY_RESPONSE_DATA.getOffset()); } 
	public static final int CA_CAT_ITEM_len = 60; 
	public static final int CA_CAT_ITEM_offset = factory.getOffset();
	public static final int CA_CAT_ITEM_num = 15;
	static { factory.incrementOffset(CA_CAT_ITEM_num * CaCatItem.CA_CAT_ITEM_len); } 
	static { factory.popOffset(); } 

	/** <pre>
	*    Fields used in Inquire Single
	     03 CA-INQUIRE-SINGLE REDEFINES CA-REQUEST-SPECIFIC. </pre> */
	static { factory.pushOffset(); } 
	static { factory.setOffset(CA_REQUEST_SPECIFIC.getOffset()); } 
	public static final int CA_INQUIRE_SINGLE_len = 911; 
	public static final int CA_INQUIRE_SINGLE_offset = factory.getOffset();

	/** <pre>
	         05 CA-ITEM-REF-REQ          PIC 9(4). </pre> */
	protected static ExternalDecimalAsIntField CA_ITEM_REF_REQ = factory.getExternalDecimalAsIntField(4, false, false, false, false);

	/** <pre>
	         05 FILLER                   PIC 9(4). </pre> */
	protected static ExternalDecimalAsIntField FILLER_1 = factory.getExternalDecimalAsIntField(4, false, false, false, false);

	/** <pre>
	         05 FILLER                   PIC 9(3). </pre> */
	protected static ExternalDecimalAsIntField FILLER_2 = factory.getExternalDecimalAsIntField(3, false, false, false, false);

	/** <pre>
	         05 CA-SINGLE-ITEM. </pre> */
	public static final int CA_SINGLE_ITEM_len = 60; 
	public static final int CA_SINGLE_ITEM_offset = factory.getOffset();

	/** <pre>
	             07 CA-SNGL-ITEM-REF     PIC 9(4). </pre> */
	protected static ExternalDecimalAsIntField CA_SNGL_ITEM_REF = factory.getExternalDecimalAsIntField(4, false, false, false, false);

	/** <pre>
	             07 CA-SNGL-DESCRIPTION  PIC X(40). </pre> */
	protected static StringField CA_SNGL_DESCRIPTION = factory.getStringField(40);

	/** <pre>
	             07 CA-SNGL-DEPARTMENT   PIC 9(3). </pre> */
	protected static ExternalDecimalAsIntField CA_SNGL_DEPARTMENT = factory.getExternalDecimalAsIntField(3, false, false, false, false);

	/** <pre>
	             07 CA-SNGL-COST         PIC X(6). </pre> */
	protected static StringField CA_SNGL_COST = factory.getStringField(6);

	/** <pre>
	             07 IN-SNGL-STOCK        PIC 9(4). </pre> */
	protected static ExternalDecimalAsIntField IN_SNGL_STOCK = factory.getExternalDecimalAsIntField(4, false, false, false, false);

	/** <pre>
	             07 ON-SNGL-ORDER        PIC 9(3). </pre> */
	protected static ExternalDecimalAsIntField ON_SNGL_ORDER = factory.getExternalDecimalAsIntField(3, false, false, false, false);

	/** <pre>
	         05 FILLER                   PIC X(840). </pre> */
	protected static StringField FILLER_3 = factory.getStringField(840);
	static { factory.popOffset(); } 

	/** <pre>
	*    Fields used in Place Order
	     03 CA-ORDER-REQUEST REDEFINES CA-REQUEST-SPECIFIC. </pre> */
	static { factory.pushOffset(); } 
	static { factory.setOffset(CA_REQUEST_SPECIFIC.getOffset()); } 
	public static final int CA_ORDER_REQUEST_len = 911; 
	public static final int CA_ORDER_REQUEST_offset = factory.getOffset();

	/** <pre>
	         05 CA-USERID                PIC X(8). </pre> */
	protected static StringField CA_USERID = factory.getStringField(8);

	/** <pre>
	         05 CA-CHARGE-DEPT           PIC X(8). </pre> */
	protected static StringField CA_CHARGE_DEPT = factory.getStringField(8);

	/** <pre>
	         05 CA-ITEM-REF-NUMBER       PIC 9(4). </pre> */
	protected static ExternalDecimalAsIntField CA_ITEM_REF_NUMBER = factory.getExternalDecimalAsIntField(4, false, false, false, false);

	/** <pre>
	         05 CA-QUANTITY-REQ          PIC 9(3). </pre> */
	protected static ExternalDecimalAsIntField CA_QUANTITY_REQ = factory.getExternalDecimalAsIntField(3, false, false, false, false);

	/** <pre>
	         05 FILLER                   PIC X(888). </pre> */
	protected static StringField FILLER_4 = factory.getStringField(888);
	static { factory.popOffset(); } 

	protected byte[] _byteBuffer;


	public DFH0XCMNCommarea (byte[] buffer) {   
		this._byteBuffer = buffer;
	}

	public DFH0XCMNCommarea () {   
		this._byteBuffer = new byte[DFH0XCMN_len];   
	}

	public byte[] getByteBuffer() {
		return _byteBuffer;
	}


	public String getCaRequestId() {
		return CA_REQUEST_ID.getString(_byteBuffer);
	}

	public void setCaRequestId(String caRequestId) {
		CA_REQUEST_ID.putString(caRequestId, _byteBuffer);
	}

	public int getCaReturnCode() {
		return CA_RETURN_CODE.getInt(_byteBuffer);
	}

	public void setCaReturnCode(int caReturnCode) {
		CA_RETURN_CODE.putInt(caReturnCode, _byteBuffer);
	}

	public String getCaResponseMessage() {
		return CA_RESPONSE_MESSAGE.getString(_byteBuffer);
	}

	public void setCaResponseMessage(String caResponseMessage) {
		CA_RESPONSE_MESSAGE.putString(caResponseMessage, _byteBuffer);
	}

	public String getCaRequestSpecific() {
		return CA_REQUEST_SPECIFIC.getString(_byteBuffer);
	}

	public void setCaRequestSpecific(String caRequestSpecific) {
		CA_REQUEST_SPECIFIC.putString(caRequestSpecific, _byteBuffer);
	}

	public int getCaListStartRef() {
		return CA_LIST_START_REF.getInt(_byteBuffer);
	}

	public void setCaListStartRef(int caListStartRef) {
		CA_LIST_START_REF.putInt(caListStartRef, _byteBuffer);
	}

	public int getCaLastItemRef() {
		return CA_LAST_ITEM_REF.getInt(_byteBuffer);
	}

	public void setCaLastItemRef(int caLastItemRef) {
		CA_LAST_ITEM_REF.putInt(caLastItemRef, _byteBuffer);
	}

	public int getCaItemCount() {
		return CA_ITEM_COUNT.getInt(_byteBuffer);
	}

	public void setCaItemCount(int caItemCount) {
		CA_ITEM_COUNT.putInt(caItemCount, _byteBuffer);
	}

	public String getCaInquiryResponseData() {
		return CA_INQUIRY_RESPONSE_DATA.getString(_byteBuffer);
	}

	public void setCaInquiryResponseData(String caInquiryResponseData) {
		CA_INQUIRY_RESPONSE_DATA.putString(caInquiryResponseData, _byteBuffer);
	}
	public CaCatItem getCaCatItem(int _arrayIndex) {
		int _arrayOffset = _arrayIndex * CA_CAT_ITEM_len;
		return new CaCatItem(_byteBuffer, CA_CAT_ITEM_offset + _arrayOffset);
	}

	public int getCaItemRefReq() {
		return CA_ITEM_REF_REQ.getInt(_byteBuffer);
	}

	public void setCaItemRefReq(int caItemRefReq) {
		CA_ITEM_REF_REQ.putInt(caItemRefReq, _byteBuffer);
	}

	public int getFiller_1() {
		return FILLER_1.getInt(_byteBuffer);
	}

	public void setFiller_1(int filler_1) {
		FILLER_1.putInt(filler_1, _byteBuffer);
	}

	public int getFiller_2() {
		return FILLER_2.getInt(_byteBuffer);
	}

	public void setFiller_2(int filler_2) {
		FILLER_2.putInt(filler_2, _byteBuffer);
	}

	public int getCaSnglItemRef() {
		return CA_SNGL_ITEM_REF.getInt(_byteBuffer);
	}

	public void setCaSnglItemRef(int caSnglItemRef) {
		CA_SNGL_ITEM_REF.putInt(caSnglItemRef, _byteBuffer);
	}

	public String getCaSnglDescription() {
		return CA_SNGL_DESCRIPTION.getString(_byteBuffer);
	}

	public void setCaSnglDescription(String caSnglDescription) {
		CA_SNGL_DESCRIPTION.putString(caSnglDescription, _byteBuffer);
	}

	public int getCaSnglDepartment() {
		return CA_SNGL_DEPARTMENT.getInt(_byteBuffer);
	}

	public void setCaSnglDepartment(int caSnglDepartment) {
		CA_SNGL_DEPARTMENT.putInt(caSnglDepartment, _byteBuffer);
	}

	public String getCaSnglCost() {
		return CA_SNGL_COST.getString(_byteBuffer);
	}

	public void setCaSnglCost(String caSnglCost) {
		CA_SNGL_COST.putString(caSnglCost, _byteBuffer);
	}

	public int getInSnglStock() {
		return IN_SNGL_STOCK.getInt(_byteBuffer);
	}

	public void setInSnglStock(int inSnglStock) {
		IN_SNGL_STOCK.putInt(inSnglStock, _byteBuffer);
	}

	public int getOnSnglOrder() {
		return ON_SNGL_ORDER.getInt(_byteBuffer);
	}

	public void setOnSnglOrder(int onSnglOrder) {
		ON_SNGL_ORDER.putInt(onSnglOrder, _byteBuffer);
	}

	public String getFiller_3() {
		return FILLER_3.getString(_byteBuffer);
	}

	public void setFiller_3(String filler_3) {
		FILLER_3.putString(filler_3, _byteBuffer);
	}

	public String getCaUserid() {
		return CA_USERID.getString(_byteBuffer);
	}

	public void setCaUserid(String caUserid) {
		CA_USERID.putString(caUserid, _byteBuffer);
	}

	public String getCaChargeDept() {
		return CA_CHARGE_DEPT.getString(_byteBuffer);
	}

	public void setCaChargeDept(String caChargeDept) {
		CA_CHARGE_DEPT.putString(caChargeDept, _byteBuffer);
	}

	public int getCaItemRefNumber() {
		return CA_ITEM_REF_NUMBER.getInt(_byteBuffer);
	}

	public void setCaItemRefNumber(int caItemRefNumber) {
		CA_ITEM_REF_NUMBER.putInt(caItemRefNumber, _byteBuffer);
	}

	public int getCaQuantityReq() {
		return CA_QUANTITY_REQ.getInt(_byteBuffer);
	}

	public void setCaQuantityReq(int caQuantityReq) {
		CA_QUANTITY_REQ.putInt(caQuantityReq, _byteBuffer);
	}

	public String getFiller_4() {
		return FILLER_4.getString(_byteBuffer);
	}

	public void setFiller_4(String filler_4) {
		FILLER_4.putString(filler_4, _byteBuffer);
	}

	/** <pre>
	         05 CA-CAT-ITEM  REDEFINES CA-INQUIRY-RESPONSE-DATA
	                         OCCURS 15 TIMES. </pre> */
	public static class CaCatItem {
		protected static CobolDatatypeFactory factory = new CobolDatatypeFactory();
		static { factory.setStringTrimDefault(false); } 

		/** <pre>
		         05 CA-CAT-ITEM  REDEFINES CA-INQUIRY-RESPONSE-DATA
		                         OCCURS 15 TIMES. </pre> */
		static { factory.pushOffset(); } 
		static { factory.setOffset(CA_INQUIRY_RESPONSE_DATA.getOffset()); } 
		public static final int CA_CAT_ITEM_len = 60; 

		/** <pre>
		             07 CA-ITEM-REF          PIC 9(4). </pre> */
		static { factory.incrementOffset(-98); } 
		protected static ExternalDecimalAsIntField CA_ITEM_REF = factory.getExternalDecimalAsIntField(4, false, false, false, false);

		/** <pre>
		             07 CA-DESCRIPTION       PIC X(40). </pre> */
		protected static StringField CA_DESCRIPTION = factory.getStringField(40);

		/** <pre>
		             07 CA-DEPARTMENT        PIC 9(3). </pre> */
		protected static ExternalDecimalAsIntField CA_DEPARTMENT = factory.getExternalDecimalAsIntField(3, false, false, false, false);

		/** <pre>
		             07 CA-COST              PIC X(6). </pre> */
		protected static StringField CA_COST = factory.getStringField(6);

		/** <pre>
		             07 IN-STOCK             PIC 9(4). </pre> */
		protected static ExternalDecimalAsIntField IN_STOCK = factory.getExternalDecimalAsIntField(4, false, false, false, false);

		/** <pre>
		             07 ON-ORDER             PIC 9(3). </pre> */
		protected static ExternalDecimalAsIntField ON_ORDER = factory.getExternalDecimalAsIntField(3, false, false, false, false);
		static { factory.popOffset(); } 

		protected byte[] _byteBuffer;
		protected int _byteBufferOffset;


		public CaCatItem (byte[] buffer, int bufOffset) {
			this._byteBuffer = buffer;
			this._byteBufferOffset = bufOffset;
		}

		public CaCatItem () {
			this._byteBuffer = new byte[CA_CAT_ITEM_len];
		}

		public byte[] getByteBuffer() {
			return _byteBuffer;
		}

		public int getByteBufferOffset() {
			return _byteBufferOffset;
		}


		public int getCaItemRef() {
			return CA_ITEM_REF.getInt(_byteBuffer, _byteBufferOffset);
		}

		public void setCaItemRef(int caItemRef) {
			CA_ITEM_REF.putInt(caItemRef, _byteBuffer, _byteBufferOffset);
		}

		public String getCaDescription() {
			return CA_DESCRIPTION.getString(_byteBuffer, _byteBufferOffset);
		}

		public void setCaDescription(String caDescription) {
			CA_DESCRIPTION.putString(caDescription, _byteBuffer, _byteBufferOffset);
		}

		public int getCaDepartment() {
			return CA_DEPARTMENT.getInt(_byteBuffer, _byteBufferOffset);
		}

		public void setCaDepartment(int caDepartment) {
			CA_DEPARTMENT.putInt(caDepartment, _byteBuffer, _byteBufferOffset);
		}

		public String getCaCost() {
			return CA_COST.getString(_byteBuffer, _byteBufferOffset);
		}

		public void setCaCost(String caCost) {
			CA_COST.putString(caCost, _byteBuffer, _byteBufferOffset);
		}

		public int getInStock() {
			return IN_STOCK.getInt(_byteBuffer, _byteBufferOffset);
		}

		public void setInStock(int inStock) {
			IN_STOCK.putInt(inStock, _byteBuffer, _byteBufferOffset);
		}

		public int getOnOrder() {
			return ON_ORDER.getInt(_byteBuffer, _byteBufferOffset);
		}

		public void setOnOrder(int onOrder) {
			ON_ORDER.putInt(onOrder, _byteBuffer, _byteBufferOffset);
		}

	}

}
